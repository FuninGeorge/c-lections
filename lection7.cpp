
//
// Created by Георгий Фунин on 11.05.2024.
//
//=====================================================================================================================//
/*
 * у шаблонов есть понятие специализации
 * NB-прочитать про smartpointer, проебал момент и ничего не понял.
 * специализация шаблона
 * пусть мы хотим найти медиану массива, в случае, когда его длина четная-мы считаем медиану как среднее арифметическое двух
 * соседних элементов, при этом хотим возвращать тип float даже если T = int. Это и называется специализацией шаблона
 */

template<typename T, int i>
class A {
};

A<int, 4> x;//пример создания экземпляра класса

//пример специализации по первому шаблонному аргументу

template<int i>
class A<int, i> {
};

//пример специализации по второму шаблонному аргументу
template<typename T>
class A<T, 4> {
};

//пример специализации по обоим аргументам
template<>
class A<int, 5> {
};
// при создании экземпляра компилятор выбирает наиболее "специализированную" специализацию, иначе сосет
//=====================================================================================================================//
/*
 * NB:шаблон-это инструкция по созданию, сам шаблон ничего не создает
 *
 */

// код в файле .h
template<typename T>
T mymax(T x, T y);

//код в файле .cpp
template<typename T>
T mymax(T x, T y) {
    return x > y ? x : y;
}
//в такой реализации будет ошибка линковки-потому что тело этой функции в заголовочном файле отсутствует
//=====================================================================================================================//
/*
 *                                     rvalue,lvalue в плюсах
 *
 *                                         value
 *                                         /    \
 *                                    glvalue  rvalue
 *                                     /   \   /   \
 *                                lvalue   xvalue   prvalue
 *
 * prvalue - рецепт по созданию объекта
 * glvalue - конкретный объект со своим адресом
 * xvalue - glvalue, конкретный объект, который скоро умрет
 * lvalue - дополнение xvalue до glvalue(остальные glvalue)
 *
 */
int q = 5;//<-prvalue
class B {
public:
    int x;

    B(int a) : x(a) {};
};

B z = B(z);//<-prvalue
int w = B(5).x;//по окончанию вычисления данного выражения х умрет(пример xvalue)
/*
 * T объект = (создание копии) можно описать с помощью prvalue
 * T& объект =(когда хотим менять объект) можно описать только с lvalue
 * T&& объект =(когда хотим оттуда украсть) можно описать по rvalue
 *
 * const T& = (когда не хотим делать копию, обращаемся по константному указателю) может конвертиться к любой категории
 *
 */
int main() {
    void f(int &x);

    int a, b;
    a = f(5);//-не компилится

    void f2(int &&x);
    int a2, b2;
    a2 = f2(std::move(b));
}
//прочитать про decltype, я опять проебал момент

