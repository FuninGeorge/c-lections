//
// Created by Георгий Фунин on 04.05.2024.
//
//================================================================================================================//
class A {
    int x;

public :
    int f();

    friend A operator+(int a, const A &b);
};

A operator+(int a, const A &b) {
    A c;
    c.x = a + b.x;//т.к. поле х приватное - эта строка не скомпилируется
    return c;
}

//решается это с помощью указания, что оператор сложения является "другом"(с.11), теперь мы можем обращаться к приватным переменным
//================================================================================================================//
class A1 {
public :
    mutable int x;// mutable позволяет менять переменную где угоднsо

    int f() const {//-const дописали после 31 строки
        return x;
    }
};

const A1 a1;
int z = a1.f(); // не скомпилируется,т.к. мы по умолчанию считается, что метод получает изменяемый this
//================================================================================================================//
/*
 * после того, как mutable выебал const, давайте выясним, как выглядит настоящий const, который в плюсах появился не сразу.
 * constexpr int b = 4; - настоящая константа времени компиляции
 * consteval - модификатор, который вычисляет функцию во время компиляции(настоящий constexpr для функций)
 * дальше он минут 30 рассказывает про эти модификаторы, пиздец
 */
//================================================================================================================//
//                                      лямбда-функции
int f(int x) {
    int y = x + 1;
    auto z = [=](int c) {
        return c + x;
    };
    return z(y);
// на самом деле, лямбда-функция это не функция(пиздец), это оператор перегрузки круглых скобок
//можно обращаться к внешним переменным, в квадратных скобках нужно указать, как мы будем брать эти переменные(= эквивалентно захвату по значению)
//можно обращаться по ссылке с помощью амперсанта
}
//================================================================================================================//
//                                          исключения
// выбрасывается с помощью ключевого слова throw, выбрасывать можно все, что угодно
//throw "все хорошо";
/*
 * try{
 *
 * }catch(int a){
 *
 * }
 * блоков catch может быть много
 */
